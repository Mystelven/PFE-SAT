<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.66"/>
    <errors>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="Sources/Clause.cpp" line="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="Sources/Clause.cpp" line="87"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="Sources/Clause.cpp" line="88"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&apos;class Clause&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&apos;class Clause&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="Headers/Clause.h" line="35"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &apos;arrayOfVariables&apos; nulled but not freed upon failure" verbose="Common realloc mistake: &apos;arrayOfVariables&apos; nulled but not freed upon failure">
            <location file="Sources/Clause.cpp" line="88"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="Sources/Problem.cpp" line="80"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&apos;class Problem&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&apos;class Problem&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="Headers/Problem.h" line="39"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;var&apos; can be reduced." verbose="The scope of the variable &apos;var&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="Sources/Solver.cpp" line="78"/>
        </error>
        <error id="functionConst" severity="style" msg="Technically the member function &apos;Solver::isSolution&apos; can be const." verbose="The member function &apos;Solver::isSolution&apos; can be made a const function. Making this function &apos;const&apos; should not cause compiler errors. Even though the function can be made const function technically it may not make sense conceptually. Think about your design and the task of the function first - is it a function that must not change object internal state?" inconclusive="true">
            <location file="Headers/Solver.h" line="67"/>
            <location file="Sources/Solver.cpp" line="124"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&apos;class Solver&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&apos;class Solver&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="Headers/Solver.h" line="33"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getTheSolution&apos; is never used." verbose="The function &apos;getTheSolution&apos; is never used.">
            <location file="Sources/Solver.cpp" line="91"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;setNum&apos; is never used." verbose="The function &apos;setNum&apos; is never used.">
            <location file="Sources/Variable.cpp" line="91"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;setValue&apos; is never used." verbose="The function &apos;setValue&apos; is never used.">
            <location file="Sources/Variable.cpp" line="74"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;solve&apos; is never used." verbose="The function &apos;solve&apos; is never used.">
            <location file="Sources/Solver.cpp" line="76"/>
        </error>
        <error id="missingIncludeSystem" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
