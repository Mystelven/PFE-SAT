<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.66"/>
    <errors>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="Sources/Clause.cpp" line="39"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="Sources/Clause.cpp" line="87"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="Sources/Clause.cpp" line="88"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&apos;class Clause&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&apos;class Clause&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="Headers/Clause.h" line="35"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &apos;arrayOfVariables&apos; nulled but not freed upon failure" verbose="Common realloc mistake: &apos;arrayOfVariables&apos; nulled but not freed upon failure">
            <location file="Sources/Clause.cpp" line="88"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts.">
            <location file="Sources/Problem.cpp" line="80"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&apos;class Problem&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&apos;class Problem&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="Headers/Problem.h" line="39"/>
        </error>
        <error id="noCopyConstructor" severity="style" msg="&apos;class Solver&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." verbose="&apos;class Solver&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory.">
            <location file="Headers/Solver.h" line="33"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;getTheSolution&apos; is never used." verbose="The function &apos;getTheSolution&apos; is never used.">
            <location file="Sources/Solver.cpp" line="90"/>
        </error>
    </errors>
</results>
