<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Clause_8h.html</Path>
    <Anchor>a6e6e50e5844ca68cb539fca70f374e8f</Anchor>
    <Abstract>We redefined the output to display a clause during debugging phases. </Abstract>
    <DeclaredIn>Clause.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>VERSION</Name>
      <APILanguage>unknown</APILanguage>
      <Type>macro</Type>
    </TokenIdentifier>
    <Path>FileLogger_8h.html</Path>
    <Anchor>a1c6d5de492ac61ad29aec7aa9a436bbf</Anchor>
    <Abstract>We will change the version number here. </Abstract>
    <DeclaredIn>FileLogger.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LogType</Name>
      <APILanguage>c</APILanguage>
      <Type>tdef</Type>
    </TokenIdentifier>
    <Path>FileLogger_8h.html</Path>
    <Anchor>ab0e33ddaef480c9f682036f78611c4ce</Anchor>
    <Abstract>We rename the enum, to be easily used in all the other class. </Abstract>
    <DeclaredIn>FileLogger.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Problem_8h.html</Path>
    <Anchor>af06fff9017e111cb0e8df2accf612d28</Anchor>
    <Abstract>We redefined the output to display a clause during debugging phases. </Abstract>
    <DeclaredIn>Problem.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Solver_8h.html</Path>
    <Anchor>a6dfdf2e6ac597069d142b9bfba85f197</Anchor>
    <Abstract>We redefined the output to display a clause during debugging phases. </Abstract>
    <DeclaredIn>Solver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Variable_8h.html</Path>
    <Anchor>a008acd2dbf74415e571517748addafba</Anchor>
    <Abstract>To test if 2 variables aren&amp;#39;t the same. </Abstract>
    <DeclaredIn>Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Variable_8h.html</Path>
    <Anchor>a27c461069027453a18dde916ed344a96</Anchor>
    <Abstract>We redefined the output to display a variable during debugging phases. </Abstract>
    <DeclaredIn>Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Variable_8h.html</Path>
    <Anchor>a7830e2cc5da52851b4d1d6639baa048a</Anchor>
    <Abstract>We redefined the equalities&amp;#39;s test to test if the variables are the same or not. </Abstract>
    <DeclaredIn>Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>displayErrorArgument</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Main_8cpp.html</Path>
    <Anchor>a07339f4c4172514dead121b7bc44a3b9</Anchor>
    <Abstract>Useful to display some error during the parsing of the CNF file. </Abstract>
    <DeclaredIn>Main.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>displayInfo</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Main_8cpp.html</Path>
    <Anchor>aefec3b27a776fbaf41bef3ae83def5be</Anchor>
    <Abstract>Useful to display some informations about the inspiration (Glucose) and about the solver itself...</Abstract>
    <DeclaredIn>Main.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>displaySolution</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Main_8cpp.html</Path>
    <Anchor>a1271dea8a50555527b7bedabbb73d03d</Anchor>
    <Abstract>Useful to display s SATISFIABLE and the solution or s INSATISFIABLE otherwise. </Abstract>
    <DeclaredIn>Main.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>displaySolveTime</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Main_8cpp.html</Path>
    <Anchor>aa50308fe611d2c527e0b3ec79a5f1ac4</Anchor>
    <Abstract>Useful to display the time to solve this instance. </Abstract>
    <DeclaredIn>Main.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>main</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Main_8cpp.html</Path>
    <Anchor>a3c04138a5bfe5d72780bb7e82a18e627</Anchor>
    <Abstract>It&amp;#39;s the beginning of this program. </Abstract>
    <DeclaredIn>Main.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log_main</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>Main_8cpp.html</Path>
    <Anchor>af12df73a10f979b5a131efd6ccae78e5</Anchor>
    <Abstract>We declare a global logger for the file. </Abstract>
    <DeclaredIn>Main.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Clause_8cpp.html</Path>
    <Anchor>a2f86da01c9566011ec3eee6e14bad7e4</Anchor>
    <Abstract>To display a clause. </Abstract>
    <DeclaredIn>Clause.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log_clause</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>Clause_8cpp.html</Path>
    <Anchor>a341f2527a670d3e3950feadc42d917cb</Anchor>
    <DeclaredIn>Clause.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>FileLogger_8cpp.html</Path>
    <Anchor>ad6c5217f2c214f926480a16a3bb437e8</Anchor>
    <Abstract>This is the overwrite of the operator&amp;lt;&amp;lt; for the Level of the Logger. </Abstract>
    <DeclaredIn>FileLogger.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>FileLogger_8cpp.html</Path>
    <Anchor>a04cbb232057dc92645ff01c3398c8834</Anchor>
    <Abstract>This is the overwrite of the operator&amp;lt;&amp;lt; for a string. </Abstract>
    <DeclaredIn>FileLogger.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>FileLogger_8cpp.html</Path>
    <Anchor>aa20cb36fa642da049aca81b2a274fca6</Anchor>
    <Abstract>This is the overwrite of the operator&amp;lt;&amp;lt; for a string. </Abstract>
    <DeclaredIn>FileLogger.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Problem_8cpp.html</Path>
    <Anchor>a47dbd2e758fc768466ac32ccdc1994c1</Anchor>
    <Abstract>To display a Problem. </Abstract>
    <DeclaredIn>Problem.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log_problem</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>Problem_8cpp.html</Path>
    <Anchor>a76ce8a622d6f8aa465da803ad1dbb4c1</Anchor>
    <DeclaredIn>Problem.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>parse_time</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>Problem_8cpp.html</Path>
    <Anchor>a21731a117bb3081cbce7f40cb8bebc39</Anchor>
    <DeclaredIn>Problem.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Solver_8cpp.html</Path>
    <Anchor>adef930e5c403340835db4a58883730b3</Anchor>
    <Abstract>To display a Solver. </Abstract>
    <DeclaredIn>Solver.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log_solver</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>Solver_8cpp.html</Path>
    <Anchor>a7a5dbfd5d2921b5e7ff7daf6bc54c68a</Anchor>
    <DeclaredIn>Solver.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Variable_8cpp.html</Path>
    <Anchor>a008acd2dbf74415e571517748addafba</Anchor>
    <Abstract>To test if 2 variables aren&amp;#39;t the same. </Abstract>
    <DeclaredIn>Variable.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Variable_8cpp.html</Path>
    <Anchor>ac294bc715f0ec679fcc93d26dc766d9c</Anchor>
    <Abstract>to display a variable. </Abstract>
    <DeclaredIn>Variable.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>c</APILanguage>
      <Type>func</Type>
    </TokenIdentifier>
    <Path>Variable_8cpp.html</Path>
    <Anchor>a7830e2cc5da52851b4d1d6639baa048a</Anchor>
    <Abstract>To test if 2 variables are the same. </Abstract>
    <DeclaredIn>Variable.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>log_variable</Name>
      <APILanguage>c</APILanguage>
      <Type>data</Type>
    </TokenIdentifier>
    <Path>Variable_8cpp.html</Path>
    <Anchor>a9e85630213e1a03668b4050ac1b8ffdd</Anchor>
    <DeclaredIn>Variable.cpp</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Clause</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Clause</Scope>
    </TokenIdentifier>
    <Path>classClause.html</Path>
    <Abstract>Xij are what we call Variable and one &amp;quot;line&amp;quot; is a Clause. </Abstract>
    <DeclaredIn>Clause.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Clause</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Clause</Scope>
    </TokenIdentifier>
    <Path>classClause.html</Path>
    <Anchor>a27d94680c3fd113add623fdb56763d71</Anchor>
    <Abstract>We can create a clause with a number of variables. </Abstract>
    <DeclaredIn>Clause.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Clause</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Clause</Scope>
    </TokenIdentifier>
    <Path>classClause.html</Path>
    <Anchor>a20a1ad9ab8ad78210d736ab4e71330c6</Anchor>
    <Abstract>We can create a clause with an array of variables. </Abstract>
    <DeclaredIn>Clause.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Clause</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Clause</Scope>
    </TokenIdentifier>
    <Path>classClause.html</Path>
    <Anchor>ab57d574be1dd927e451d9c16ffa376f3</Anchor>
    <Abstract>This is the copy-constructor of a Clause. </Abstract>
    <DeclaredIn>Clause.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Clause</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Clause</Scope>
    </TokenIdentifier>
    <Path>classClause.html</Path>
    <Anchor>aac0f1f0b919c4588c23037f39f04bb85</Anchor>
    <Abstract>We can create a clause without any variable. </Abstract>
    <DeclaredIn>Clause.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>addVariable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Clause</Scope>
    </TokenIdentifier>
    <Path>classClause.html</Path>
    <Anchor>ae28edef701491dfdc219320692a885cc</Anchor>
    <Abstract>We can add a Variable directly to our Clause. </Abstract>
    <DeclaredIn>Clause.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>display</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Clause</Scope>
    </TokenIdentifier>
    <Path>classClause.html</Path>
    <Anchor>a9b9518cbde39454337001bab693d347a</Anchor>
    <Abstract>to display a clause </Abstract>
    <DeclaredIn>Clause.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getVariables</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Clause</Scope>
    </TokenIdentifier>
    <Path>classClause.html</Path>
    <Anchor>af62d60cb85e53417cfa9412e93bca2fa</Anchor>
    <Abstract>We can get the ident-th Variable. </Abstract>
    <DeclaredIn>Clause.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Clause</Scope>
    </TokenIdentifier>
    <Path>classClause.html</Path>
    <Anchor>aac782da1f912bceb5d8ad00c8dc892ac</Anchor>
    <Abstract>We can get the size of the array in the clause. </Abstract>
    <DeclaredIn>Clause.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>arrayOfVariables</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Clause</Scope>
    </TokenIdentifier>
    <Path>classClause.html</Path>
    <Anchor>a5b07ad8a6420b4794d5c9d147809e6a2</Anchor>
    <Abstract>a clause is just an array of variables </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nbVariables</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Clause</Scope>
    </TokenIdentifier>
    <Path>classClause.html</Path>
    <Anchor>a760aa9fcc9b7aae244fab831d14c11e1</Anchor>
    <Abstract>And we are able to get the number of Variable directly. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FileLogger</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>FileLogger</Scope>
    </TokenIdentifier>
    <Path>classFileLogger.html</Path>
    <Abstract>This class represents a basic Logger. </Abstract>
    <DeclaredIn>FileLogger.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FileLogger</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FileLogger</Scope>
    </TokenIdentifier>
    <Path>classFileLogger.html</Path>
    <Anchor>a6961f350238f0c3640d45c33cbd18671</Anchor>
    <Abstract>It represent the constructor of a FileLogger to create a FileLogger we need a version and the name of...</Abstract>
    <DeclaredIn>FileLogger.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~FileLogger</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>FileLogger</Scope>
    </TokenIdentifier>
    <Path>classFileLogger.html</Path>
    <Anchor>a04a441b5ab4cbe897ebeb0cd040657a4</Anchor>
    <Abstract>Represents the destructor of the logger, we close properly the file and we free the memory used...</Abstract>
    <DeclaredIn>FileLogger.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>myFile</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>FileLogger</Scope>
    </TokenIdentifier>
    <Path>classFileLogger.html</Path>
    <Anchor>addd2eec6f8c59a92005a46180437fc73</Anchor>
    <Abstract>We need a file descriptor to write logs inside. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>numErrors</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>FileLogger</Scope>
    </TokenIdentifier>
    <Path>classFileLogger.html</Path>
    <Anchor>ac12b71010307e608314b1341213685dd</Anchor>
    <Abstract>We need to count the number of error to write it down at the end of the file. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>numInfos</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>FileLogger</Scope>
    </TokenIdentifier>
    <Path>classFileLogger.html</Path>
    <Anchor>acbd70623c7feb8c1c1c14f0be43dab43</Anchor>
    <Abstract>We need to count the number of info to write it down at the end of the file. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>numWarnings</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>FileLogger</Scope>
    </TokenIdentifier>
    <Path>classFileLogger.html</Path>
    <Anchor>ad3d283ac6bd6ff57f27bf9e816c15493</Anchor>
    <Abstract>We need to count the number of warning to write it down at the end of the file. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>FileLogger</Scope>
    </TokenIdentifier>
    <Path>classFileLogger.html</Path>
    <Anchor>a7e61ff7789620dd939e3d74a21864165</Anchor>
    <Abstract>This is the overwrite of the operator&amp;lt;&amp;lt; for the Level of the Logger. </Abstract>
    <DeclaredIn>FileLogger.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>FileLogger</Scope>
    </TokenIdentifier>
    <Path>classFileLogger.html</Path>
    <Anchor>aa20cb36fa642da049aca81b2a274fca6</Anchor>
    <Abstract>This is the overwrite of the operator&amp;lt;&amp;lt; for a string. </Abstract>
    <DeclaredIn>FileLogger.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>FileLogger</Scope>
    </TokenIdentifier>
    <Path>classFileLogger.html</Path>
    <Anchor>a04cbb232057dc92645ff01c3398c8834</Anchor>
    <Abstract>This is the overwrite of the operator&amp;lt;&amp;lt; for a string. </Abstract>
    <DeclaredIn>FileLogger.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LOG_ERROR</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>FileLogger</Scope>
    </TokenIdentifier>
    <Path>classFileLogger.html</Path>
    <Anchor>af46c257df9593b75071374b9188f21aaa230506cce5c68c3bac5a821c42ed3473</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LOG_WARNING</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>FileLogger</Scope>
    </TokenIdentifier>
    <Path>classFileLogger.html</Path>
    <Anchor>af46c257df9593b75071374b9188f21aaa8f6fe15bfe15104da6d1b360194a5400</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LOG_INFO</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>FileLogger</Scope>
    </TokenIdentifier>
    <Path>classFileLogger.html</Path>
    <Anchor>af46c257df9593b75071374b9188f21aaa6e98ff471e3ce6c4ef2d75c37ee51837</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Problem</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Problem</Scope>
    </TokenIdentifier>
    <Path>classProblem.html</Path>
    <Abstract>the complete boolean expression is the Problem. </Abstract>
    <DeclaredIn>Problem.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Problem</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Problem</Scope>
    </TokenIdentifier>
    <Path>classProblem.html</Path>
    <Anchor>a0df44f20096ddb5201b82120da82af8e</Anchor>
    <Abstract>We can create a Problem with an array of Clause. </Abstract>
    <DeclaredIn>Problem.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Problem</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Problem</Scope>
    </TokenIdentifier>
    <Path>classProblem.html</Path>
    <Anchor>ad2bb42abc6430714ae4576ff89b4eb33</Anchor>
    <Abstract>We can create a Problem directly from a CNF file. </Abstract>
    <DeclaredIn>Problem.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Problem</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Problem</Scope>
    </TokenIdentifier>
    <Path>classProblem.html</Path>
    <Anchor>a556e0e20c95a7b5b272b8d3a79fa9caf</Anchor>
    <Abstract>This is the copy-constructor of a Problem. </Abstract>
    <DeclaredIn>Problem.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>display</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Problem</Scope>
    </TokenIdentifier>
    <Path>classProblem.html</Path>
    <Anchor>a9b9518cbde39454337001bab693d347a</Anchor>
    <Abstract>To display a Problem. </Abstract>
    <DeclaredIn>Problem.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getClause</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Problem</Scope>
    </TokenIdentifier>
    <Path>classProblem.html</Path>
    <Anchor>a67b23140b2e80145a0671a87183e753d</Anchor>
    <Abstract>We can get a reference to the i-th Clause of the Problem. </Abstract>
    <DeclaredIn>Problem.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNbClauses</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Problem</Scope>
    </TokenIdentifier>
    <Path>classProblem.html</Path>
    <Anchor>af18b83d5f9e0cb7c35f100346f62aa8d</Anchor>
    <Abstract>We can get the number of Clauses in the Problem. </Abstract>
    <DeclaredIn>Problem.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNbVariables</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Problem</Scope>
    </TokenIdentifier>
    <Path>classProblem.html</Path>
    <Anchor>a74fa4f7d3102d003af79208a9001f29c</Anchor>
    <Abstract>We can get the number of Variables in the Problem. </Abstract>
    <DeclaredIn>Problem.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>arrayOfClauses</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Problem</Scope>
    </TokenIdentifier>
    <Path>classProblem.html</Path>
    <Anchor>a8b3887325dbf1958fce0a4f30afed8dc</Anchor>
    <Abstract>A Problem is just an array of Clauses. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nbClauses</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Problem</Scope>
    </TokenIdentifier>
    <Path>classProblem.html</Path>
    <Anchor>a78552348f2be74fce83839fdc026068c</Anchor>
    <Abstract>We need to have a look on the number of clauses and the number of variables. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nbVariables</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Problem</Scope>
    </TokenIdentifier>
    <Path>classProblem.html</Path>
    <Anchor>a760aa9fcc9b7aae244fab831d14c11e1</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Solver</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Solver</Scope>
    </TokenIdentifier>
    <Path>classSolver.html</Path>
    <Abstract>A Solver is just a value for each Variable of every Clause in one Problem. </Abstract>
    <DeclaredIn>Solver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Solver</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Solver</Scope>
    </TokenIdentifier>
    <Path>classSolver.html</Path>
    <Anchor>a4701e9bd4cdbac621cce4472fd25e141</Anchor>
    <Abstract>This is the constructor of a Solver adapted to a problem. </Abstract>
    <DeclaredIn>Solver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Solver</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Solver</Scope>
    </TokenIdentifier>
    <Path>classSolver.html</Path>
    <Anchor>a352d24ceaa425443d4afb751a4d7560b</Anchor>
    <Abstract>This is the copy-constructor of a Solver. </Abstract>
    <DeclaredIn>Solver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>display</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Solver</Scope>
    </TokenIdentifier>
    <Path>classSolver.html</Path>
    <Anchor>a9b9518cbde39454337001bab693d347a</Anchor>
    <Abstract>To display a Strategie. </Abstract>
    <DeclaredIn>Solver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSize</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Solver</Scope>
    </TokenIdentifier>
    <Path>classSolver.html</Path>
    <Anchor>af55b3790622878d65ed5ff2bb2b3fcc4</Anchor>
    <Abstract>This method allows us to get the number of variable in the Problem. </Abstract>
    <DeclaredIn>Solver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>inverse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Solver</Scope>
    </TokenIdentifier>
    <Path>classSolver.html</Path>
    <Anchor>a5b099bdec45c7eb60b0962bd2b06b9f0</Anchor>
    <Abstract>This method is use to inverse the i-th value in our solution. </Abstract>
    <DeclaredIn>Solver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isOpen</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Solver</Scope>
    </TokenIdentifier>
    <Path>classSolver.html</Path>
    <Anchor>a4eee9b4117ef8e512d8cf90c18311c59</Anchor>
    <Abstract>Check if one clause is open with our current solution. </Abstract>
    <DeclaredIn>Solver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isSolution</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Solver</Scope>
    </TokenIdentifier>
    <Path>classSolver.html</Path>
    <Anchor>acda01ea8a4bf261df678b4a5c17a8106</Anchor>
    <Abstract>Check if our current solution is one solution of the Problem. </Abstract>
    <DeclaredIn>Solver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>solve</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Solver</Scope>
    </TokenIdentifier>
    <Path>classSolver.html</Path>
    <Anchor>a2e9de364ab96aafabb2942850cb74c81</Anchor>
    <Abstract>This method is use to solve a Problem. </Abstract>
    <DeclaredIn>Solver.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>arrayOfSolutions</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Solver</Scope>
    </TokenIdentifier>
    <Path>classSolver.html</Path>
    <Anchor>a2d4f03d40744e392cf7ec14d9cbc2465</Anchor>
    <Abstract>Our array of solutions. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Solver</Scope>
    </TokenIdentifier>
    <Path>classSolver.html</Path>
    <Anchor>a854352f53b148adc24983a58a1866d66</Anchor>
    <Abstract>The number of variable in the Problem. </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>classVariable.html</Path>
    <Abstract>each x is a variable or a negation of a variable, and each variable can appear multiple times in the ...</Abstract>
    <DeclaredIn>Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>classVariable.html</Path>
    <Anchor>a2c1cfefa7e483aa584ffc072f52dc705</Anchor>
    <Abstract>It allows the constructor in 2 ways and then, There is no need to worry about the order of the parame...</Abstract>
    <DeclaredIn>Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>classVariable.html</Path>
    <Anchor>ae0775ee5ef358fa5baf411710ab8303d</Anchor>
    <Abstract>It allows the constructor in 2 ways and then, There is no need to worry about the order of the parame...</Abstract>
    <DeclaredIn>Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Variable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>classVariable.html</Path>
    <Anchor>abe74367303db535be9f64d5710d3808b</Anchor>
    <Abstract>Constructor which can create a variable from a int and value always true. </Abstract>
    <DeclaredIn>Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>beEqual</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>classVariable.html</Path>
    <Anchor>a82e4d4652cce5e73f3e52d2ffcb673a2</Anchor>
    <Abstract>To test if 2 variables are the same. </Abstract>
    <DeclaredIn>Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>display</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>classVariable.html</Path>
    <Anchor>a9b9518cbde39454337001bab693d347a</Anchor>
    <Abstract>We create methods of the class to redefine operators to gain access to private fields. </Abstract>
    <DeclaredIn>Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNum</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>classVariable.html</Path>
    <Anchor>a2126e92c07534e97f3730dc21d00b3d1</Anchor>
    <Abstract>to get the num of the variable. </Abstract>
    <DeclaredIn>Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>classVariable.html</Path>
    <Anchor>aeee842363db67294da0babed545b9dcd</Anchor>
    <Abstract>to get the value of the variable. </Abstract>
    <DeclaredIn>Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reverse</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>classVariable.html</Path>
    <Anchor>a310c0bebc002158f5646a91d60e4dc89</Anchor>
    <Abstract>It gives the possibility to reverse a variable. </Abstract>
    <DeclaredIn>Variable.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>num</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>classVariable.html</Path>
    <Anchor>a41ddefd3473727cad32a9767c10faed8</Anchor>
    <Abstract>a variable has a number to identify itself </Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>Variable</Scope>
    </TokenIdentifier>
    <Path>classVariable.html</Path>
    <Anchor>a0376be5904d0dd864b7d97c9ce1295ab</Anchor>
    <Abstract>a variable is either true or false. </Abstract>
  </Token>
</Tokens>
